#!/usr/bin/env python
# -*- encoding: utf-8 -*-
import os
import os.path
import sys
import argparse
import struct
from Crypto.PublicKey import RSA

class RSATool:
    def __init__(self):
        parser = argparse.ArgumentParser()
        sub_parsers = parser.add_subparsers(help='sub commands')
        info_parser = sub_parsers.add_parser('info', help='show RSA public/private key information')
        info_parser.add_argument('--hex', help='print values in hexadecimal form', action='store_true')
        info_parser.add_argument('infile', nargs='?', type=argparse.FileType('rb'), default=sys.stdin)
        info_parser.set_defaults(func=self.info)
        args = parser.parse_args()
        args.func(args)

    def info(self, args):
        keydata = args.infile.read()
        key = RSA.importKey(keydata)

        print("N = %s" % (hex(key.n)[:-1] if args.hex else str(key.n)))
        print("e = %s" % (hex(key.e)[:-1] if args.hex else str(key.e)))
        if key.has_private():
            print("p = %s" % (hex(key.p)[:-1] if args.hex else str(key.p)))
            print("q = %s" % (hex(key.q)[:-1] if args.hex else str(key.q)))
            print("d = %s" % (hex(key.d)[:-1] if args.hex else str(key.d)))


if __name__ == '__main__':
    RSATool()
